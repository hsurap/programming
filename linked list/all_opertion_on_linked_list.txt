#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class node{
    public:
    int val;
    node*next;
    node(int val)
    {
        this->val=val;
        next=NULL;
    }
};

node* insertion_at_head(node*head,int val)
{
    node*newnode=new node(val);
    if(head==NULL)
    {
        head=newnode;
        return head;
    }
    newnode->next=head;
    head=newnode;
    return head;
}

node* insertion_at_tail(node*head,int val)
{
    node*newnode=new node(val);
    if(head==NULL)
    {
        head=newnode;
        return head;
    }
    node*temp=head;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=newnode;
    return head;
}

node* insertion_at_particular_position(node*head,int pos,int val)
{
    node* newnode=new node(val);
    if(pos==0)
    {
        newnode->next=head;
        head=newnode;
        return head;
    }
    node*temp=head;
    int count=0;
    while(temp!=NULL && count<=pos-2)
    {
        temp=temp->next;
        count++;
    }
    if(temp!=NULL)
    {
        newnode->next=temp->next;
        temp->next=newnode;
    }
    return head;
}

node*deletion_at_start(node*head)
{
    if(head==NULL || head->next==NULL)
        return NULL;
    node*temp=head;
    head=head->next;
    delete temp;
    return head;
}

node*deletion_at_end(node*head)
{
    if(head==NULL || head->next==NULL)
        return NULL;
    node*temp=head;
    while(temp->next->next!=NULL)
    {
        temp=temp->next;
    }
    node*point=temp->next;
    temp->next=NULL;
    delete point;
    return head;
}

node*deleting_specific_node(node*head,int data)
{
    if(head==NULL || head->val==data)
        return NULL;
    node*temp=head;
    while(temp!=NULL && temp->next->val!=data)
    {
        temp=temp->next;
    }
    if(temp!=NULL)
    {
        node*point=temp->next;
        temp->next=point->next;
        delete point;
    }
    return head;
}
int search(node*head,int data)
{
    if(head==NULL)
        return -1;
    int count=0;
    while(head!=NULL && head->val!=data)
    {
        count++;
        head=head->next;
    }
    if(head==NULL)
        return -1;
    return count;
}
void print(node*head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
    cout<<endl;
}
int main()
{
	node*head;
	head=insertion_at_head(head,10);print(head);
	head=insertion_at_head(head,20);print(head);
	head=insertion_at_head(head,30);print(head);
	head=insertion_at_head(head,40);print(head);
	head=insertion_at_tail(head,50);print(head);
	head=insertion_at_tail(head,60);print(head);
	head=insertion_at_particular_position(head,3,99);print(head);
	head=insertion_at_particular_position(head,7,100);print(head);
	head=insertion_at_particular_position(head,7,77);print(head);
	head=deletion_at_start(head);print(head);
	head=deletion_at_start(head);print(head);
	head=deletion_at_end(head);print(head);
	head=deletion_at_end(head);print(head);
	head=deleting_specific_node(head,10);print(head);
	head=deleting_specific_node(head,99);print(head);
	int ans=search(head,60);print(head);
	
	cout<<endl;
	cout<<ans<<endl;
	print(head);
	
	return 0;
}