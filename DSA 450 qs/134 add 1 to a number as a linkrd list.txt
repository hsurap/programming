//Initial template for C++

#include <bits/stdc++.h> 
using namespace std; 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

void printList(Node* node) 
{ 
    while (node != NULL) { 
        cout << node->data; 
        node = node->next; 
    }  
    cout<<"\n";
} 


 // } Driver Code Ends
//User function template for C++

/* 

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

Node*reverse(Node*head)
{
    if(head==NULL || head->next==NULL)
        return head;
    Node*small=reverse(head->next);
    head->next->next=head;
    head->next=NULL;
    return small;
}

class Solution
{
    public:
    Node* addOne(Node *head) 
    {
        if(head==NULL)
            return head;
        int carry=1;
        Node*newhead=reverse(head);
        Node*temp=newhead;
        Node*prev=NULL;
        while(temp!=NULL)
        {
            prev=temp;
            if(temp->data<=8)
            {
                temp->data+=carry;
                carry=0;
                break;
            }
            else{
                temp->data=0;
                carry=1;
                temp=temp->next;
            }
        }
        if(carry==1)
        {
            Node*newnode=new Node(1);
            prev->next=newnode;
        }
        Node*ans=reverse(newhead);
        return ans;
    }
};

// { Driver Code Starts.

int main() 
{ 
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        
        Node* head = new Node( s[0]-'0' );
        Node* tail = head;
        for(int i=1; i<s.size(); i++)
        {
            tail->next = new Node( s[i]-'0' );
            tail = tail->next;
        }
        Solution ob;
        head = ob.addOne(head);
        printList(head); 
    }
    return 0; 
} 
  // } Driver Code Ends