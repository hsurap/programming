//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// Tree Node
struct Node
{
    int data;
    Node* left;
    Node* right;
};

// Utility function to create a new Tree Node
Node* newNode(int val)
{
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}

// Function to Build Tree
Node* buildTree(string str)
{
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str; )
        ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends


/*
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/
class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    void func(Node *root,map<int,pair<int,int>> &my_map,int index,int level)
    {
        if(root==NULL)
            return;
        if(!my_map.count(index)  || (my_map.count(index) && level < my_map[index].second))
        {
            my_map[index].first=root->data;
            my_map[index].second= level;
        }
            
        func(root->left,my_map,index-1, level+1);
        func(root->right,my_map,index+1, level+1);
    }
    vector<int> topView(Node *root)
    {
        vector<int>v;
        if(root==NULL)
            return v;
        map<int,pair<int,int>> my_map;
        func(root,my_map,0,0);
        vector<int>p;
        vector<int>n;
        int i=0;
        while(true)
        {
           if(my_map.count(i))
           {
               p.push_back(my_map[i].first);
               i++;
           }
           else
                break;
        }
        i=-1;
        while(true)
        {
           if(my_map.count(i))
           {
               n.push_back(my_map[i].first);
               i--;
           }
           else
                break;
        }
        for(int i=n.size()-1;i>=0;i--)
        {
            v.push_back(n[i]);
        }
        for(int i=0;i<p.size();i++)
        {
            v.push_back(p[i]);
        }
        return v;
    }

};



// { Driver Code Starts.

int main() {
    int tc;
    cin>>tc;
    cin.ignore(256, '\n');
    while (tc--) {
        string treeString;
        getline(cin, treeString);
        Solution ob;
        Node *root = buildTree(treeString);
        vector<int> vec = ob.topView(root);
        for(int x : vec)
            cout<<x<<" ";
        cout<<endl;
    }
    return 0;
}  // } Driver Code Ends