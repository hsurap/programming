#include <iostream>
#include<bits/stdc++.h>
using namespace std;

vector<int>haspath(int**edges,int n,bool*visited,int st,int en)
{
    unordered_map<int,int>map;
    queue<int>q;
    q.push(st);
    visited[st]=true;
    bool flag=false;
    while(q.size()!=0)
    {
        int front=q.front();
        q.pop();
        for(int i=0;i<n;i++)
        {
            if(edges[front][i]==1 && visited[i]==false)
            {
                map[i]=front;
                q.push(i);
                visited[i]=true;
                if(i==en)
                {
                    flag=true;
                    break;
                }
            }
        }
        if(flag==true)
            break;
    }
    vector<int>ans;
    int key=en;
    if(flag==true)
    {
        while(key!=st)
        {
            ans.push_back(key);
            key=map[key];
        }
        ans.push_back(key);
        return ans;
    }
    return ans;
    
}

int main() {
	int n,e;
	cin>>n>>e;
	int**edges=new int*[n];
	for(int i=0;i<n;i++)
	{
	    edges[i]=new int[n];
	    for(int j=0;j<n;j++)
	    {
	        edges[i][j]=0;
	    }
	}
	for(int i=0;i<e;i++)
	{
	    int sv,ev;
	    cin>>sv>>ev;
	    edges[sv][ev]=1;
	    edges[ev][sv]=1;
	}
	bool *visited=new bool[n];
	for(int i=0;i<n;i++)
	{
	    visited[i]=false;
	}
	int st,en;
	cin>>st>>en;
	vector<int>v;
	v=haspath(edges,n,visited,st,en);
	for(int i=0;i<v.size();i++)
	{
	    cout<<v[i]<<" ";
	}
	return 0;
}