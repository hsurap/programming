#include <iostream>
#include<bits/stdc++.h>
using namespace std;

void DFS(int**edges,int n,bool*visited,int st,vector<int>&v)
{
    v.push_back(st);
    visited[st]=true;
    for(int i=0;i<n;i++)
    {
        if(edges[st][i]==1 && visited[i]==false)
            DFS(edges,n,visited,i,v);
    }
}

vector<vector<int>> func(int**edges,int n)
{
    vector<vector<int>>ans;
    bool *visited=new bool[n];
	for(int i=0;i<n;i++)
	{
	    visited[i]=false;
	}
	for(int i=0;i<n;i++)
	{
	    vector<int>sv;
	    if(visited[i]==false)
	    {
	        DFS(edges,n,visited,i,sv);
	        ans.push_back(sv);
	    }
	}
	return ans;
}

int main() {
	int n,e;
	cin>>n>>e;
	int**edges=new int*[n];
	for(int i=0;i<n;i++)
	{
	    edges[i]=new int[n];
	    for(int j=0;j<n;j++)
	    {
	        edges[i][j]=0;
	    }
	}
	for(int i=0;i<e;i++)
	{
	    int sv,ev;
	    cin>>sv>>ev;
	    edges[sv][ev]=1;
	    edges[ev][sv]=1;
	}
	vector<vector<int>>ans;
	ans=func(edges,n);
	for(int i=0;i<ans.size();i++)
	{
	    int s=ans[i].size();
	    for(int j=0;j<s;j++)
	    {
	        cout<<ans[i][j]<<" ";
	    }
	    cout<<endl;
	}
	return 0;
}