#include <iostream>
#include<queue>
using namespace std;
template<typename T>
class binarytreenode{
    public:
    T data;
    binarytreenode *left;
    binarytreenode *right;
    binarytreenode(T data)
    {
        this->data=data;
        left=NULL;
        right=NULL;
    }
    ~binarytreenode()
    {
        delete left;
        delete right;
    }
};

void printtree(binarytreenode<int>*root)
{
    if(root==NULL)
        return;
    cout<<root->data<<" :";
    if(root->left!=NULL)
        cout<<"L "<<root->left->data<<" ";
    if(root->right!=NULL)
        cout<<"R "<<root->right->data<<" ";
    
    cout<<endl;
    printtree(root->left);
    printtree(root->right);
}

binarytreenode<int>*takeinput()
{
    int rootdata;
    cout<<"Enter data"<<endl;
    cin>>rootdata;
    if(rootdata==-1)
        return NULL;
    
    binarytreenode<int>*root=new binarytreenode<int>(rootdata);
    binarytreenode<int>*leftnode=takeinput();
    binarytreenode<int>*rightnode=takeinput();
    root->left=leftnode;
    root->right=rightnode;
    return root;
    
}

binarytreenode<int>*takeinputLevelwise()
{
    int rootdata;
    cout<<"Enter root data"<<endl;
    cin>>rootdata;
    if(rootdata==-1)
        return NULL;
    
    binarytreenode<int>*root=new binarytreenode<int>(rootdata);
    queue<binarytreenode<int>*>q;
    q.push(root);
    while(q.size()!=0)
    {
        binarytreenode<int>*front=q.front();
        q.pop();
        int leftrootdata;
        cout<<"enter left node of "<<front->data<<endl;
        cin>>leftrootdata;
        if(leftrootdata!=-1)
        {
            binarytreenode<int>*leftch=new binarytreenode<int>(leftrootdata);
            front->left=leftch;
            q.push(leftch);
        }
        int rightrootdata;
        cout<<"enter right node of "<<front->data<<endl;
        cin>>rightrootdata;
        if(rightrootdata!=-1)
        {
            binarytreenode<int>*rightch=new binarytreenode<int>(rightrootdata);
            front->right=rightch;
            q.push(rightch);
        }
    }
    return root;
    
}

void printLevelwise(binarytreenode<int>*root)
{
    if(root==NULL)
        return ;
    
    queue<binarytreenode<int>*>q;
    q.push(root);
    while(q.size()!=0)
    {
        binarytreenode<int>*front=q.front();
        q.pop();
        cout<<front->data<<" :";
        if(front->left!=NULL)
        {
            cout<<"L "<<front->left->data<<" ";
            q.push(front->left);
        }
            
        if(front->right!=NULL)
        {
            cout<<"R "<<front->right->data<<" ";
            q.push(front->right);
        }
        cout<<endl;
            
    }
    
}

int main() {
// 	binarytreenode<int>*root=new binarytreenode<int>(1);
// 	binarytreenode<int>*node1=new binarytreenode<int>(2);
// 	binarytreenode<int>*node2=new binarytreenode<int>(3);
// 	root->left=node1;
// 	root->right=node2;
    binarytreenode<int>*root=takeinputLevelwise();
// 	printtree(root);
    printLevelwise(root);
	
	return 0;
}