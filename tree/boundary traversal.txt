class Solution {
public:
    void lefttraversal(Node *root,vector<int>&ans)
    {
        if(root==NULL)
            return;
        if(root->left==NULL && root->right==NULL)
            return ;
        ans.push_back(root->data);
        if(root->left!=NULL)
            lefttraversal(root->left,ans);
        else
            lefttraversal(root->right,ans);
        
    }
    void leaf(Node *root,vector<int>&ans)
    {
        if(root==NULL)
            return;
        if(root->left==NULL && root->right==NULL)
        {
            ans.push_back(root->data);
            return;
        }
            
        leaf(root->left,ans);
        leaf(root->right,ans);
    }
    void righttraversal(Node *root,vector<int>&ans)
    {
        if(root==NULL)
            return;
        if(root->left==NULL && root->right==NULL)
            return ;
        if(root->right!=NULL)
            righttraversal(root->right,ans);
        else
            righttraversal(root->left,ans);
        ans.push_back(root->data);
        
    }
    vector <int> boundary(Node *root)
    {
        vector<int>ans;
        if(root==NULL)
            return ans;
        ans.push_back(root->data);
        lefttraversal(root->left,ans);
        leaf(root->left,ans);
        leaf(root->right,ans);
        righttraversal(root->right,ans);
        return ans;
    }
};