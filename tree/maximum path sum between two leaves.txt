
#include <iostream>
// #include "BinaryTreeNode.h"
#include <queue>
using namespace std;

template <typename T>
class BinaryTreeNode {
	public:
	T data;
	BinaryTreeNode* left;
	BinaryTreeNode* right;

	BinaryTreeNode(T data) {
		this->data = data;
		left = NULL;
		right = NULL;
	}

	~BinaryTreeNode() {
		delete left;
		delete right;
	}
};


BinaryTreeNode<int>* takeInputLevelWise() {
	int rootData;
	cout << "Enter root data" << endl;
	cin >> rootData;
	if (rootData == -1) {
		return NULL;
	}

	BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);

	queue<BinaryTreeNode<int>*> pendingNodes;
	pendingNodes.push(root);
	while (pendingNodes.size() != 0) {
		BinaryTreeNode<int>* front = pendingNodes.front();
		pendingNodes.pop();
		cout << "Enter left child of " << front->data << endl;
		int leftChildData;
		cin >> leftChildData;
		if (leftChildData != -1) {
			BinaryTreeNode<int>* child = new BinaryTreeNode<int>(leftChildData);
			front->left = child;
			pendingNodes.push(child);
		}
		cout << "Enter right child of " << front->data << endl;
		int rightChildData;
		cin >> rightChildData;
		if (rightChildData != -1) {
			BinaryTreeNode<int>* child = new BinaryTreeNode<int>(rightChildData);
			front->right = child;
			pendingNodes.push(child);
		}
	}
	return root;
}

void printTree(BinaryTreeNode<int>* root) {
	if (root == NULL) {
		return;
	}
	cout << root->data << ":";
	if (root->left != NULL) {
		cout << "L" << root->left->data;
	}

	if (root->right != NULL) {
		cout << "R" << root->right->data;
	}
	cout << endl;
	printTree(root->left);
	printTree(root->right);
}

void func(BinaryTreeNode<int>*root,int sum,int &max_sum)
{
    if(root==NULL)
    {
        return;
    }
    if(root->left==NULL && root->right==NULL && sum+root->data>max_sum)
    {
        max_sum=sum+root->data;
        return;
    }
    func(root->left,sum+root->data,max_sum);
    func(root->right,sum+root->data,max_sum);
    return;
}
int funcc(BinaryTreeNode<int>*root)
{
    int max_sum=0;
    
    func(root,0,max_sum);
    return max_sum;
}



// BinaryTreeNode<int>* takeInput() {
// 	int rootData;
// 	cout << "Enter data" << endl;
// 	cin >> rootData;
// 	if (rootData == -1) {
// 		return NULL;
// 	}

// 	BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);
// 	BinaryTreeNode<int>* leftChild = takeInput();
// 	BinaryTreeNode<int>* rightChild = takeInput();
// 	root->left = leftChild;
// 	root->right = rightChild;
// 	return root;
// }


int maximum_path(BinaryTreeNode<int>*root)
{
    if(root==NULL)
    {
        return 0;
    }
    int ans1=funcc(root->left)+funcc(root->right)+root->data;
    // cout<<ans1<<" ";
    int ans2=maximum_path(root->left);
    // cout<<ans2<<" ";
    int ans3=maximum_path(root->right);
    
    return max(ans1,max(ans2,ans3));
}

int main() {
	/*
		 BinaryTreeNode<int>* root = new BinaryTreeNode<int>(1);
		 BinaryTreeNode<int>* node1 = new BinaryTreeNode<int>(2);
		 BinaryTreeNode<int>* node2 = new BinaryTreeNode<int>(3);
		 root->left = node1;
		 root->right = node2;
	*/
	BinaryTreeNode<int>* root = takeInputLevelWise();
// 	printTree(root);
    // cout<<funcc(root)<<endl;
    // cout<<max_sum;
    cout<<maximum_path(root);
	delete root;
}



