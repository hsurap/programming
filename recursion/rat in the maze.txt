#include <iostream>
using namespace std;

void printPath(int **arr,int n,int **visit,int x,int y)
{
    if(x== n-1 && y== n-1){
        visit[x][y]=1;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cout<<visit[i][j]<<" ";
            }
            cout<<endl;
        }
        cout<<endl;
        return;
    }
    if(x<0 || y<0 || x>=n || y>=n || arr[x][y]==0 || visit[x][y]==1)
        return ;
    visit[x][y]=1;
    printPath(arr,n,visit,x-1,y);
    printPath(arr,n,visit,x+1,y);
    printPath(arr,n,visit,x,y-1);
    printPath(arr,n,visit,x,y+1);
    visit[x][y]=0;
    return ;
}

bool hasPathhelper(int **arr,int n,int **visit,int x,int y)
{
    if(x== n-1 && y== n-1)
        return true;
    if(x<0 || y<0 || x>=n || y>=n || arr[x][y]==0 || visit[x][y]==1)
        return false;
    visit[x][y]=1;
    if(hasPathhelper(arr,n,visit,x-1,y))
        return true;
    if(hasPathhelper(arr,n,visit,x+1,y))
        return true;
    if(hasPathhelper(arr,n,visit,x,y-1))
        return true;
    if(hasPathhelper(arr,n,visit,x,y+1))
        return true;
    visit[x][y]=0;
    return false;
}

bool hasPath(int **arr,int n)
{
    int**visit=new int*[n];
    for(int i=0;i<n;i++)
	{
	    visit[i]=new int[n];
	    for(int j=0;j<n;j++)
	    {
	        visit[i][j]=0;
	    }
	}
    // return hasPathhelper(arr,n,visit,0,0);
    printPath(arr,n,visit,0,0);
    return 1;
}

int main() {
	int n;
	cin>>n;
	int**arr=new int*[n];
	for(int i=0;i<n;i++)
	{
	    arr[i]=new int[n];
	    for(int j=0;j<n;j++)
	    {
	        cin>>arr[i][j];
	    }
	}
	bool ans=hasPath(arr,n);
	cout<<ans<<endl;
	return 0;
}