class Solution {
public:
    bool func(vector<int>& nums,int i,int s,vector<vector<int>>&dp)
    {
        if(i==0)
            return nums[i]==s;
        if(dp[i][s]!=-1)return dp[i][s];
        bool c1=func(nums,i-1,s,dp);
        bool c2=false;
        if(nums[i]<=s)
            c2=func(nums,i-1,s-nums[i],dp);
        return dp[i][s]=c1||c2;
    }
    bool canPartition(vector<int>& nums) 
    {
        int sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
        }
        if(sum%2!=0)
            return false;
        vector<vector<int>>dp(nums.size(),vector<int>((sum/2)+1,-1));
        return func(nums,nums.size()-1,sum/2,dp);
    }
};