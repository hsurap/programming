#include <iostream>
using namespace std;

class node{
    public:
    int data;
    node*next;
    node*prev;
    node(int data)
    {
        this->data=data;
        next=NULL;
        prev=NULL;
    }
};

node*takeInput()
{
    int val;
    cin>>val;
    node*head=NULL;
    node*tail=NULL;
    while(val!=-1)
    {
        node*newnode = new node(val);
        if(head==NULL)
        {
            head=newnode;
            tail=newnode;
        }
        else{
            tail->next=newnode;
            newnode->prev=tail;
            tail=tail->next;
        }
        cin>>val;
    }
    return head;

}

void print(node*head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        if(temp->prev!=NULL)
            cout<<temp->prev->data<<" ";
        
        cout<<temp->data<<" ";
        
        if(temp->next!=NULL)
            cout<<temp->next->data<<" ";
            
        cout<<endl;
        temp=temp->next;
    }
    // while(temp!=NULL)
    // {
    //     cout<<temp->data<<" ";
    //     temp=temp->next;
    // }
}

int size(node*head)
{
    int count=0;
    while(head!=NULL)
    {
        count++;
        head=head->next;
    }
    return count;
}

bool check(int no)
{
    int count=0;
    while(no>0)
    {
        count+=(no&1);
        no=no>>1;
    }
    if(count%2==0)
        return true;
    else
        return false;
}


node*removeEvenNode(node*head)
{
    if(head==NULL || (head->next==NULL && check(head->data)))
        return NULL;
    
    node*temp=head->next;
    node*back=head;
    while(temp!=NULL)
    {
        
        if(check(temp->data))
        {
            back->next=temp->next;
            node*a=temp;
            temp=temp->next;
            temp->prev=back;
            delete a;
        }
        else{
            back=temp;
            temp=temp->next;
        }
    }
    if(check(head->data))
    {
        node*b=head;
        head=head->next;
        head->prev=NULL;
        delete b;
        
    }
    return head;
}

int main()
{
    node*head=takeInput();
    print(head);
    cout<<endl;
    head=removeEvenNode(head);
    print(head);
    cout<<endl;
    return 0;
}
