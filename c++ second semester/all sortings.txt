#include<iostream>
#include<bits/stdc++.h>
using namespace std;

//insertion sort
void insertion_sort()
{
    int n,j;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    { 
        cin>>a[i]; 
        
    } 
    for(int i=0;i<n;i++)
    { 
        int no=a[i]; 
        for( j=i-1;j>=0&&no<a[j];j--)
        { 
            a[j+1]=a[j];
            
        } 
        a[++j]=no;
        
        
    } 
    for(int i=0;i<n;i++)
    { 
        cout<<a[i]<<" ";
    }
}

//selection sort

void selection_sort()
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    } 
    for(int i=0;i<n-1;i++) 
    { 
        int min_index=i;
        int min_ele=a[i]; 
        for(int j=i+1;j<n;j++)
        {
            if(min_ele>a[j]) 
            {
                min_ele=a[j];
                min_index=j;
            }
        } 
        swap(a[i],a[min_index]); 
        
    } 
    for(int i=0;i<n;i++) 
    { 
        cout<<a[i]<<" ";
    }
}

//merging array
void merge(int a[],int si,int ei)
{ 
    int mid=(si+ei)/2;
    int size=ei-si+1;
    int *arr=new int[size];
    int i=si;
    int j=mid+1;
    int k=0;
    while(i<=mid&&j<=ei)
    { 
        if(a[i]<a[j])
        { 
            arr[k++]=a[i++];
        } 
        else{ 
            arr[k++]=a[j++];
        }
    } 
    while(i<=mid) 
    { 
        arr[k++]=a[i++];
    } 
    while(j<=ei) 
    { 
        arr[k++]=a[j++];
    } 
    int m=0; 
    for(int i=si;i<=ei;i++)
    { 
        a[i]=arr[m]; m++;
    } 
    delete []arr;
    
}

//merge sort
void merge_sort(int a[],int si,int ei)
{ 
    if(si>=ei) 
    { 
        return;
    } 
    int mid=(si+ei)/2; 
    merge_sort(a,si,mid); 
    merge_sort(a,mid+1,ei); 
    merge(a,si,ei);
    
}

void merge__sort()
{
    int a[100];
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    { 
        cin>>a[i];
    } 
    merge_sort(a,0,n-1);
    for(int i=0;i<n;i++)
    {
        cout<<a[i]<<" ";
    }
}
//quick sort
int partition(int a[],int si,int ei)
{ 
    int first_element=a[si];
    int count =0;
    for(int i=si+1;i<=ei;i++)
    { 
        if(a[i]<=first_element)
        { 
            count++;
        } 
        
    } 
    int partition_index=si+count;
    swap(a[si],a[partition_index]); 
    int i=si;
    int j=ei;
    while(i<partition_index&&j>partition_index)
    { 
        if(a[i]<=first_element) 
        {
            i++;
        } 
        else if(a[j]>first_element)
        { 
            j--; 
            
        } 
        else{ 
            swap(a[i],a[j]);
            i++,
            j--;
        } 
        
    } 
    return partition_index;
    
}
void quick_sort(int a[],int si,int ei)
{ 
    if(si>=ei)
    { 
        return ;
    } 
    int p=partition(a,si,ei);
    quick_sort(a,si,p-1);
    quick_sort(a,p+1,ei);
    
}

void quick__sort()
{
    int a[100];
    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    { 
        cin>>a[i];
    } 
    quick_sort(a,0,n-1);
    for(int i=0;i<n;i++) 
    { 
        cout<<a[i]<<" ";
    }
}



int main()
{ 
    int choice;
    
    cout<<"1.insertion"<<endl<<"2.merge"<<endl<<"3.quick"<<endl<<"4.selection"<<endl;
    cin>>choice;
    if(choice==1)
        insertion_sort();
    else if(choice==2)
        merge__sort();
    else if(choice==3)
        quick__sort();
    else
        selection_sort();
        
    
}