#include <iostream>
#include<queue>
using namespace std;

// void print(int**edges,int n,int sv,bool*visit)
// {
//     cout<<sv<<" ";
//     visit[sv]=true;
//     for(int i=0;i<n;i++)
//     {
//         if(i==sv)
//             continue;
//         if(edges[sv][i]==1)
//         {
//             if(visit[i]==true)
//                 continue;
//             else
//                 print(edges,n,i,visit);
//         }
        
//     }
// }

void bfsprint(int**edges,int n,int sv,bool*visit)
{
    queue<int>q;
    q.push(sv);
    visit[sv]=true;
    while(q.size()!=0)
    {
        int front=q.front();
        q.pop();
        
        cout<<front<<" ";
        for(int i=0;i<n;i++)
        {
            if(edges[front][i]==1)
            {
                if(front==i || visit[i]==true)
                    continue;
                else
                {
                    q.push(i);
                    visit[i]=true;
                }
                    
            }
        }
    }
}

int main() {
	int n,e;
	cin>>n>>e;
	int**edges=new int*[n];
	for(int i=0;i<n;i++)
	{
	    edges[i]=new int[n];
	    for(int j=0;j<n;j++)
	    {
	        edges[i][j]=0;
	    }
	}
	int fv,sv;
	for(int i=0;i<e;i++)
	{
	    cin>>fv>>sv;
	    edges[fv][sv]=1;
	    edges[sv][fv]=1;
	}
	
	bool *visit=new bool[n];
	for(int i=0;i<n;i++)
	{
	    visit[i]=false;
	}
	
	//print(edges,n,0,visit);
	bfsprint(edges,n,0,visit);
	return 0;
}